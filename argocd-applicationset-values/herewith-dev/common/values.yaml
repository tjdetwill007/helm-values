configmaps:
  config-all-v-latest:
    data:
      ASSETS_WORKER_BATCH_SIZE: "3"
      ASSETS_WORKER_PARALLELIZATION_COUNT: "50"
      BACKGROUND_CHECK_INVITER_TYPE: checkr
      CHANGE_LOG_BATCH_SIZE: "3"
      CHANGE_LOG_WORKER_PARALLELIZATION_COUNT: "100"
      CHAT_TYPE: getstream
      EMAIL_SENDER_TYPE: smtp
      ENV_NAME: staging
      FIREBASE_PROJECT_ID: quoori-family
      HUBSPOT_CLIENT_TYPE: http
      HUBSPOT_LEAD_SOURCE: Backend Staging
      HWS_TAX_FRACTION: "0.1"
      INSURANCE_GIG_CLIENT_TYPE: http
      INVITE_LINK_GENERATOR_TYPE: branch
      JOB_ENQUEUER_TYPE: sns
      JOBS_BATCH_SIZE: "3"
      JOBS_WORKER_PARALLELIZATION_COUNT: "100"
      LISTEN_API: :8080
      LISTEN_API_VERSION: v-latest
      LISTEN_METRICS: :9090
      LOG_LEVEL: debug
      MAPS_CLIENT_TYPE: google
      PAYMENT_MANAGER_TYPE: stripe
      PAYROLL_REMINDER_NOTIFY_ON_WEEKDAYS: Wednesday,Thursday,Friday,Saturday,Sunday
      PUSH_NOTIFICATION_SENDER_TYPE: fcm
      RECRUITING_CLIENT_TYPE: greenhouse
      SEARCH_INDEX_TYPE: algolia
      SEARCH_INDEX_UPDATER_TYPE: sns
      SERVICE_FEE_FRACTION: "0.2"
      SMS_SENDER_TYPE: twilio
      TENANT_MANAGER_TYPE: firebase
      VIDEO_PROFILE_BATCH_SIZE: "3"
      VIDEO_PROFILE_WORKER_PARALLELIZATION_COUNT: "50"
    enabled: true
  config-all-v6:
    data:
      ASSETS_WORKER_BATCH_SIZE: "3"
      ASSETS_WORKER_PARALLELIZATION_COUNT: "50"
      BACKGROUND_CHECK_INVITER_TYPE: checkr
      CHANGE_LOG_BATCH_SIZE: "3"
      CHANGE_LOG_WORKER_PARALLELIZATION_COUNT: "100"
      CHAT_TYPE: getstream
      EMAIL_SENDER_TYPE: smtp
      ENV_NAME: staging
      FIREBASE_PROJECT_ID: quoori-family
      HUBSPOT_CLIENT_TYPE: http
      HUBSPOT_LEAD_SOURCE: Backend Staging
      INSURANCE_GIG_CLIENT_TYPE: http
      INVITE_LINK_GENERATOR_TYPE: branch
      JOB_ENQUEUER_TYPE: sns
      JOBS_BATCH_SIZE: "3"
      JOBS_WORKER_PARALLELIZATION_COUNT: "100"
      LISTEN_API: :8080
      LISTEN_API_VERSION: v6
      LISTEN_METRICS: :9090
      LOG_LEVEL: debug
      MAPS_CLIENT_TYPE: google
      PAYMENT_MANAGER_TYPE: stripe
      PAYROLL_REMINDER_NOTIFY_ON_WEEKDAYS: Saturday,Sunday
      PUSH_NOTIFICATION_SENDER_TYPE: fcm
      RECRUITING_CLIENT_TYPE: greenhouse
      SEARCH_INDEX_TYPE: algolia
      SEARCH_INDEX_UPDATER_TYPE: sns
      SMS_SENDER_TYPE: twilio
      TENANT_MANAGER_TYPE: firebase
      VIDEO_PROFILE_BATCH_SIZE: "3"
      VIDEO_PROFILE_WORKER_PARALLELIZATION_COUNT: "50"
    enabled: true
deployment:
  enabled: false
externalSecrets:
  algolia-credentials:
    data:
      ALGOLIA_API_ENDPOINTS:
        remoteRef:
          key: backend-algolia-credentials
          property: api_endpoints
      ALGOLIA_APPLICATION_ID:
        remoteRef:
          key: backend-algolia-credentials
          property: application_id
      ALGOLIA_SEARCH_KEY:
        remoteRef:
          key: backend-algolia-credentials
          property: search_key
      ALGOLIA_WRITE_KEY:
        remoteRef:
          key: backend-algolia-credentials
          property: write_key
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          ALGOLIA_API_ENDPOINTS: '{{ .ALGOLIA_API_ENDPOINTS }}'
          ALGOLIA_APPLICATION_ID: '{{ .ALGOLIA_APPLICATION_ID }}'
          ALGOLIA_SEARCH_KEY: '{{ .ALGOLIA_SEARCH_KEY }}'
          ALGOLIA_WRITE_KEY: '{{ .ALGOLIA_WRITE_KEY }}'
  branch-credentials:
    data:
      BRANCH_CAREGIVER_KEY:
        remoteRef:
          key: backend-dev-branch-caregiver-credentials
          property: key
      BRANCH_KEY:
        remoteRef:
          key: backend-dev-branch-credentials
          property: key
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
  bucket-configs:
    data:
      LEGAL_DOCUMENTS_BUCKET_NAME:
        remoteRef:
          key: backend-config
          property: legal_s3_bucket
      USER_DOCUMENTS_BUCKET_NAME:
        remoteRef:
          key: backend-config
          property: user_documents_s3_bucket
      VIDEO_PROFILES_BUCKET_NAME:
        remoteRef:
          key: backend-config
          property: video_profile_s3_bucket
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          LEGAL_DOCUMENTS_BUCKET_NAME: '{{ .LEGAL_DOCUMENTS_BUCKET_NAME }}'
          USER_DOCUMENTS_BUCKET_NAME: '{{ .USER_DOCUMENTS_BUCKET_NAME }}'
          VIDEO_PROFILES_BUCKET_NAME: '{{ .VIDEO_PROFILES_BUCKET_NAME }}'
  checkr-credentials:
    data:
      CHECKR_KEY:
        remoteRef:
          key: backend-checker-credentials
          property: key
      CHECKR_URL:
        remoteRef:
          key: backend-checker-credentials
          property: url
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        CHECKR_KEY: '{{ .CHECKR_KEY }}'
        CHECKR_URL: '{{ .CHECKR_URL }}'
  firebase-credentials:
    data:
      FIREBASE_CREDENTIALS:
        remoteRef:
          key: backend-firebase-family-credentials
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          FIREBASE_CREDENTIALS: '{{ .FIREBASE_CREDENTIALS }}'
  get-stream-credentials:
    data:
      GET_STREAM_KEY:
        remoteRef:
          key: backend-getstream-credentials
          property: key
      GET_STREAM_SECRET:
        remoteRef:
          key: backend-getstream-credentials
          property: secret
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        GET_STREAM_KEY: '{{ .GET_STREAM_KEY }}'
        GET_STREAM_SECRET: '{{ .GET_STREAM_SECRET }}'
  google-maps-credentials:
    data:
      GOOGLE_MAPS_KEY:
        remoteRef:
          key: backend-gmaps-credentials
          property: api_key
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          GOOGLE_MAPS_KEY: '{{ .GOOGLE_MAPS_KEY }}'
  greenhouse-credentials:
    data:
      GREEN_HOUSE_KEY:
        remoteRef:
          key: backend-greenhouse-credentials
          property: harvest_key
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          GREEN_HOUSE_KEY: '{{ .GREEN_HOUSE_KEY }}'
  hasura-credentials:
    data:
      admin_key:
        remoteRef:
          key: backend-hasura-credentials
          property: admin_key
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          HASURA_GRAPHQL_ADMIN_SECRET: '{{ .admin_key }}'
  homework-credentials:
    data:
      HOMEWORK_API_ENDPOINT:
        remoteRef:
          key: backend-hws-adapter-config
          property: homework_api_endpoint
      HOMEWORK_API_TOKEN:
        remoteRef:
          key: backend-hws-adapter-config
          property: homework_api_token
      HOMEWORK_CLIENT_TYPE:
        remoteRef:
          key: backend-hws-adapter-config
          property: homework_client_type
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          HOMEWORK_API_ENDPOINT: '{{ .HOMEWORK_API_ENDPOINT }}'
          HOMEWORK_API_TOKEN: '{{ .HOMEWORK_API_TOKEN }}'
          HOMEWORK_CLIENT_TYPE: '{{ .HOMEWORK_CLIENT_TYPE }}'
  hubspot-credentials:
    data:
      HUBSPOT_API_URL:
        remoteRef:
          key: backend-hubspot-credentials
          property: api_url
      HUBSPOT_PRIVATE_API_TOKEN:
        remoteRef:
          key: backend-hubspot-credentials
          property: private_api_token
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          HUBSPOT_API_URL: '{{ .HUBSPOT_API_URL }}'
          HUBSPOT_PRIVATE_API_TOKEN: '{{ .HUBSPOT_PRIVATE_API_TOKEN }}'
  insurance-credentials:
    data:
      INSURANCE_GIG_API_URL:
        remoteRef:
          key: backend-insurance-gig-credentials
          property: api_url
      INSURANCE_GIG_LOGIN_URL:
        remoteRef:
          key: backend-insurance-gig-credentials
          property: login_url
      INSURANCE_GIG_PASSWORD:
        remoteRef:
          key: backend-insurance-gig-credentials
          property: password
      INSURANCE_GIG_USERNAME:
        remoteRef:
          key: backend-insurance-gig-credentials
          property: username
      INSURANCE_REFERRAL_EMAIL:
        remoteRef:
          key: backend-insurance-gig-credentials
          property: referral_email
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          INSURANCE_GIG_API_URL: '{{ .INSURANCE_GIG_API_URL }}'
          INSURANCE_GIG_LOGIN_URL: '{{ .INSURANCE_GIG_LOGIN_URL }}'
          INSURANCE_GIG_PASSWORD: '{{ .INSURANCE_GIG_PASSWORD }}'
          INSURANCE_GIG_USERNAME: '{{ .INSURANCE_GIG_USERNAME }}'
          INSURANCE_REFERRAL_EMAIL: '{{ .INSURANCE_REFERRAL_EMAIL }}'
  intercom-credentials:
    data:
      INTERCOM_ANDROID_FAMILY_SECRET:
        remoteRef:
          key: backend-intercom-credentials
          property: android_family
      INTERCOM_ANDROID_PRO_SECRET:
        remoteRef:
          key: backend-intercom-credentials
          property: android_pro
      INTERCOM_IOS_FAMILY_SECRET:
        remoteRef:
          key: backend-intercom-credentials
          property: ios_family
      INTERCOM_IOS_PRO_SECRET:
        remoteRef:
          key: backend-intercom-credentials
          property: ios_pro
      INTERCOM_WEB_FAMILY_SECRET:
        remoteRef:
          key: backend-intercom-credentials
          property: web_family
      INTERCOM_WEB_PRO_SECRET:
        remoteRef:
          key: backend-intercom-credentials
          property: web_pro
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          INTERCOM_ANDROID_FAMILY_SECRET: '{{ .INTERCOM_ANDROID_FAMILY_SECRET }}'
          INTERCOM_ANDROID_PRO_SECRET: '{{ .INTERCOM_ANDROID_PRO_SECRET }}'
          INTERCOM_IOS_FAMILY_SECRET: '{{ .INTERCOM_IOS_FAMILY_SECRET }}'
          INTERCOM_IOS_PRO_SECRET: '{{ .INTERCOM_IOS_PRO_SECRET }}'
          INTERCOM_WEB_FAMILY_SECRET: '{{ .INTERCOM_WEB_FAMILY_SECRET }}'
          INTERCOM_WEB_PRO_SECRET: '{{ .INTERCOM_WEB_PRO_SECRET }}'
  media-convert-configs:
    data:
      MEDIA_CONVERT_ENDPOINT:
        remoteRef:
          key: backend-config
          property: media_convert_endpoint
      MEDIA_CONVERT_ROLE_ARN:
        remoteRef:
          key: backend-config
          property: media_convert_role_arn
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          MEDIA_CONVERT_ENDPOINT: '{{ .MEDIA_CONVERT_ENDPOINT }}'
          MEDIA_CONVERT_ROLE_ARN: '{{ .MEDIA_CONVERT_ROLE_ARN }}'
  postgres-backend-credentials:
    data:
      dbname:
        remoteRef:
          key: postgres-backend-credentials
          property: dbname
      host:
        remoteRef:
          key: postgres-backend-credentials
          property: host
      password:
        remoteRef:
          key: postgres-backend-credentials
          property: password
      port:
        remoteRef:
          key: postgres-backend-credentials
          property: port
      username:
        remoteRef:
          key: postgres-backend-credentials
          property: username
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          BACKEND_POSTGRES_URL: postgresql://{{ .username }}:{{ .password }}@{{ .host
            }}:{{ .port }}/dev_backend
          HASURA_GRAPHQL_DATABASE_URL: postgresql://{{ .username }}:{{ .password }}@{{
            .host }}:{{ .port }}/dev_backend
  postgres-changelog-credentials:
    data:
      dbname:
        remoteRef:
          key: postgres-changelog-credentials
          property: dbname
      host:
        remoteRef:
          key: postgres-changelog-credentials
          property: host
      password:
        remoteRef:
          key: postgres-changelog-credentials
          property: password
      port:
        remoteRef:
          key: postgres-changelog-credentials
          property: port
      username:
        remoteRef:
          key: postgres-changelog-credentials
          property: username
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          CHANGE_LOG_POSTGRES_URL: postgresql://{{ .username }}:{{ .password }}@{{
            .host }}:{{ .port }}/dev_changelog
  queue-configs:
    data:
      ASSETS_JOBS_SQS_QUEUE_URL:
        remoteRef:
          key: backend-dev-config
          property: assets_jobs_sqs_queue_url
      CHANGE_LOG_SNS_TOPIC_ARN:
        remoteRef:
          key: backend-dev-config
          property: change_log_sns_topic_arn
      CHANGE_LOG_SQS_QUEUE_URL:
        remoteRef:
          key: backend-dev-config
          property: change_log_sqs_queue_url
      JOBS_SNS_TOPIC_ARN:
        remoteRef:
          key: backend-dev-config
          property: jobs_sns_topic_arn
      JOBS_SQS_QUEUE_URL:
        remoteRef:
          key: backend-dev-config
          property: jobs_sqs_queue_url
      VIDEO_PROFILE_SQS_QUEUE_URL:
        remoteRef:
          key: backend-dev-config
          property: video_profile_sqs_queue_url
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
  smtp-credentials:
    data:
      SMTP_ENDPOINT:
        remoteRef:
          key: backend-smtp-credentials
          property: endpoint
      SMTP_PASSWORD:
        remoteRef:
          key: backend-smtp-credentials
          property: password
      SMTP_STARTTLS_PORT:
        remoteRef:
          key: backend-smtp-credentials
          property: starttls_port
      SMTP_TLS_PORT:
        remoteRef:
          key: backend-smtp-credentials
          property: tls_port
      SMTP_USERNAME:
        remoteRef:
          key: backend-smtp-credentials
          property: username
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        SMTP_ENDPOINT: '{{ .SMTP_ENDPOINT }}'
        SMTP_PASSWORD: '{{ .SMTP_PASSWORD }}'
        SMTP_STARTTLS_PORT: '{{ .SMTP_STARTTLS_PORT }}'
        SMTP_TLS_PORT: '{{ .SMTP_TLS_PORT }}'
        SMTP_USERNAME: '{{ .SMTP_USERNAME }}'
  stripe-credentials:
    data:
      STRIPE_API_KEY:
        remoteRef:
          key: backend-dev-stripe-credentials
          property: api_key
      STRIPE_PUBLISHABLE_KEY:
        remoteRef:
          key: backend-dev-stripe-credentials
          property: publishable_key
      STRIPE_WEBHOOK_SECRET:
        remoteRef:
          key: backend-dev-stripe-credentials
          property: webhook_secret
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          STRIPE_API_KEY: '{{ .STRIPE_API_KEY }}'
          STRIPE_PUBLISHABLE_KEY: '{{ .STRIPE_PUBLISHABLE_KEY }}'
          STRIPE_WEBHOOK_SECRET: '{{ .STRIPE_WEBHOOK_SECRET }}'
  twilio-credentials:
    data:
      TWILIO_PASSWORD:
        remoteRef:
          key: backend-twilio-credentials
          property: auth_token
      TWILIO_SENDER_NAME:
        remoteRef:
          key: backend-twilio-credentials
          property: sms_sender_name
      TWILIO_SENDER_NUMBER:
        remoteRef:
          key: backend-twilio-credentials
          property: sms_sender_number
      TWILIO_USERNAME:
        remoteRef:
          key: backend-twilio-credentials
          property: account_sid
    enabled: true
    secretStoreRef:
      kind: ClusterSecretStore
      name: cluster-external-secrets
    target:
      template:
        data:
          TWILIO_PASSWORD: '{{ .TWILIO_PASSWORD }}'
          TWILIO_SENDER_NAME: '{{ .TWILIO_SENDER_NAME }}'
          TWILIO_SENDER_NUMBER: '{{ .TWILIO_SENDER_NUMBER }}'
          TWILIO_USERNAME: '{{ .TWILIO_USERNAME }}'
ingress:
  default:
    annotations:
      nginx.org/server-snippets: |
        location / {
          return 410 "API not supported anymore"
        }
    enabled: false
monitoring:
  prometheus:
    serviceMonitor:
      enabled: false
podDisruptionBudget:
  enabled: false
serviceAccount:
  enabled: false
services:
  default:
    enabled: false
